# #!/bin/bash

# # H√†m ghi log v√† hi·ªÉn th·ªã ra m√†n h√¨nh
# log_and_echo() {
#     echo "$1"
# }

# log_and_echo "=================================================="
# log_and_echo "B·∫Øt ƒë·∫ßu qu√° tr√¨nh c√†i ƒë·∫∑t MTProxy (GetPageSpeed fork)..."
# log_and_echo "Th·ªùi gian b·∫Øt ƒë·∫ßu: $(date)"
# log_and_echo "=================================================="
# echo ""

# # --- B∆∞·ªõc 1: C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt ---
# log_and_echo "[1/8] ƒêang c·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i ph·ª• thu·ªôc..."
# export DEBIAN_FRONTEND=noninteractive
# apt-get update -yqq > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     log_and_echo "L·ªñI: apt-get update th·∫•t b·∫°i."
#     exit 1
# fi
# apt-get install -y -qq git curl build-essential libssl-dev zlib1g-dev make ufw > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     log_and_echo "L·ªñI: apt-get install th·∫•t b·∫°i."
#     exit 1
# fi
# log_and_echo "C√†i ƒë·∫∑t g√≥i ph·ª• thu·ªôc th√†nh c√¥ng."
# echo ""

# # --- B∆∞·ªõc 2: T·∫£i m√£ ngu·ªìn MTProxy (GetPageSpeed fork) ---
# log_and_echo "[2/8] ƒêang t·∫£i m√£ ngu·ªìn MTProxy (GetPageSpeed fork)..."
# REPO_URL="https://github.com/GetPageSpeed/MTProxy"
# REPO_DIR="/opt/MTProxy_GetPageSpeed"
# if [ -d "$REPO_DIR" ]; then
#   rm -rf "$REPO_DIR"
# fi
# git clone "$REPO_URL" "$REPO_DIR" > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     log_and_echo "L·ªñI: git clone th·∫•t b·∫°i. Ki·ªÉm tra URL repo ho·∫∑c k·∫øt n·ªëi m·∫°ng."
#     exit 1
# fi
# log_and_echo "T·∫£i m√£ ngu·ªìn th√†nh c√¥ng v√†o $REPO_DIR."
# echo ""

# # --- B∆∞·ªõc 3: Bi√™n d·ªãch MTProxy ---
# log_and_echo "[3/8] ƒêang bi√™n d·ªãch MTProxy..."
# cd "$REPO_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $REPO_DIR"; exit 1; }
# make > /dev/null 2>&1
# if [ ! -f "objs/bin/mtproto-proxy" ]; then
#     log_and_echo "L·ªñI: Bi√™n d·ªãch MTProxy th·∫•t b·∫°i."
#     cd /
#     exit 1
# fi
# log_and_echo "Bi√™n d·ªãch th√†nh c√¥ng."
# echo ""

# # --- B∆∞·ªõc 4: Chu·∫©n b·ªã file v√† th∆∞ m·ª•c th·ª±c thi ---
# PROXY_EXEC_PATH="${REPO_DIR}/objs/bin/mtproto-proxy"
# WORKING_DIR="${REPO_DIR}/objs/bin"
# cd "$WORKING_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $WORKING_DIR"; exit 1; }
# log_and_echo "[4/8] ƒêang chu·∫©n b·ªã trong th∆∞ m·ª•c: $(pwd)"
# echo ""

# # --- B∆∞·ªõc 5: T·∫°o client secret v√† t·∫£i official proxy secret/config ---
# log_and_echo "[5/8] ƒêang t·∫°o client secret v√† t·∫£i official proxy secret/config..."
# NEW_CLIENT_SECRET=$(head -c 16 /dev/urandom | xxd -p -c 16)

# log_and_echo "T·∫£i official-proxy-secret t·ª´ core.telegram.org..."
# curl -sS --fail https://core.telegram.org/getProxySecret -o official-proxy-secret
# if [ $? -ne 0 ] || [ ! -s official-proxy-secret ]; then
#     log_and_echo "C·∫¢NH B√ÅO QUAN TR·ªåNG: Kh√¥ng t·∫£i ƒë∆∞·ª£c official-proxy-secret."
#     log_and_echo "Proxy c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng n·∫øu kh√¥ng c√≥ file n√†y."
#     # Kh√¥ng exit, nh∆∞ng c·∫£nh b√°o r√µ
# fi

# log_and_echo "T·∫£i proxy-multi.conf t·ª´ core.telegram.org..."
# curl -sS --fail https://core.telegram.org/getProxyConfig -o proxy-multi.conf
# if [ $? -ne 0 ] || [ ! -s proxy-multi.conf ]; then # Check curl exit status AND if file is not empty
#     log_and_echo "L·ªñI QUAN TR·ªåNG: Kh√¥ng t·∫£i ƒë∆∞·ª£c proxy-multi.conf t·ª´ Telegram."
#     log_and_echo "Proxy s·∫Ω kh√¥ng th·ªÉ ho·∫°t ƒë·ªông n·∫øu kh√¥ng c√≥ file n√†y ho·∫∑c file n√†y kh√¥ng ƒë√∫ng."
#     log_and_echo "Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa VPS v√† th·ª≠ ch·∫°y l·∫°i script."
#     log_and_echo "B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ t·∫£i th·ªß c√¥ng: curl -o ${WORKING_DIR}/proxy-multi.conf https://core.telegram.org/getProxyConfig"
#     exit 1 # Tho√°t script v√¨ ƒë√¢y l√† l·ªói nghi√™m tr·ªçng
# fi
# log_and_echo "T·∫°o client secret v√† t·∫£i file c·∫•u h√¨nh th√†nh c√¥ng."
# log_and_echo "Client Secret m·ªõi: $NEW_CLIENT_SECRET"
# echo ""

# # --- B∆∞·ªõc 6: T·∫°o port ng·∫´u nhi√™n ---
# log_and_echo "[6/8] ƒêang t·∫°o port ng·∫´u nhi√™n..."
# RANDOM_PORT=$(shuf -i 10000-65535 -n 1)
# log_and_echo "Port ng·∫´u nhi√™n m·ªõi: $RANDOM_PORT"
# echo ""

# # --- B∆∞·ªõc 7: M·ªü port tr√™n Firewall (UFW) ---
# log_and_echo "[7/8] ƒêang m·ªü port $RANDOM_PORT tr√™n Firewall (UFW)..."
# if ! command -v ufw > /dev/null; then
#     log_and_echo "C·∫£nh b√°o: ufw ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
# else
#     if ! ufw status | grep -qw active; then
#         log_and_echo "UFW ch∆∞a active. ƒêang k√≠ch ho·∫°t v√† cho ph√©p SSH..."
#         ufw allow ssh > /dev/null 2>&1
#         ufw --force enable > /dev/null 2>&1
#     fi
#     ufw allow ${RANDOM_PORT}/tcp > /dev/null 2>&1
#     ufw reload > /dev/null 2>&1
#     log_and_echo "ƒê√£ th√™m rule cho port $RANDOM_PORT/tcp v√† reload UFW."
# fi
# echo ""

# # --- B∆∞·ªõc 8: L·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß ---
# log_and_echo "[8/8] ƒêang l·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß..."
# SERVER_IP=$(curl -s --max-time 10 ifconfig.me/ip || curl -s --max-time 10 api.ipify.org || hostname -I | awk '{print $1}')
# if [ -z "$SERVER_IP" ]; then
#     log_and_echo "C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y ƒë·ªãa ch·ªâ IP. Link c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c."
#     SERVER_IP="YOUR_SERVER_IP"
# fi
# log_and_echo "ƒê·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß: $SERVER_IP"
# echo ""

# # --- Chu·∫©n b·ªã th√¥ng tin ch·∫°y v√† link ---
# PROXY_RUN_COMMAND="${PROXY_EXEC_PATH} -u nobody -p 8888 -H ${RANDOM_PORT} -S ${NEW_CLIENT_SECRET} --aes-pwd official-proxy-secret proxy-multi.conf -M 1"
# TG_LINK="tg://proxy?server=${SERVER_IP}&port=${RANDOM_PORT}&secret=${NEW_CLIENT_SECRET}"
# LOG_PROXY_OUTPUT_FILE="${WORKING_DIR}/mtproxy_runtime.log"

# log_and_echo "===================================================================="
# log_and_echo "C√ÄI ƒê·∫∂T HO√ÄN T·∫§T! ƒêANG CHU·∫®N B·ªä KH·ªûI CH·∫†Y..."
# log_and_echo "===================================================================="
# log_and_echo "--------------------------------------------------------------------"
# log_and_echo "L·ªánh ch·∫°y proxy (s·∫Ω t·ª± ƒë·ªông ch·∫°y ·ªü n·ªÅn):"
# log_and_echo "   nohup ${PROXY_RUN_COMMAND} > ${LOG_PROXY_OUTPUT_FILE} 2>&1 &"
# log_and_echo "   (Log c·ªßa proxy s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: ${LOG_PROXY_OUTPUT_FILE})"
# log_and_echo "--------------------------------------------------------------------"
# echo ""

# # --- B∆Ø·ªöC CU·ªêI: T·ª∞ ƒê·ªòNG KH·ªûI CH·∫†Y PROXY ---
# log_and_echo "ƒêang kh·ªüi ch·∫°y proxy ·ªü ch·∫ø ƒë·ªô n·ªÅn..."
# cd "$WORKING_DIR" || exit
# # X√≥a log c≈© tr∆∞·ªõc khi ch·∫°y m·ªõi
# if [ -f "${LOG_PROXY_OUTPUT_FILE}" ]; then
#     rm -f "${LOG_PROXY_OUTPUT_FILE}"
# fi
# nohup ${PROXY_RUN_COMMAND} > ${LOG_PROXY_OUTPUT_FILE} 2>&1 &

# # Ch·ªù v√† ki·ªÉm tra nhi·ªÅu l·∫ßn
# PROXY_RUNNING=false
# ATTEMPTS=0
# MAX_ATTEMPTS=5
# SLEEP_INTERVAL=4

# log_and_echo "ƒêang ki·ªÉm tra tr·∫°ng th√°i proxy (trong v√≤ng $((MAX_ATTEMPTS * SLEEP_INTERVAL)) gi√¢y)..."
# while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
#     sleep $SLEEP_INTERVAL
#     if ss -tlpn | grep -q ":${RANDOM_PORT}"; then
#         PROXY_RUNNING=true
#         break
#     fi
#     ATTEMPTS=$((ATTEMPTS + 1))
#     if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
#       log_and_echo "Ki·ªÉm tra l·∫ßn $((ATTEMPTS +1 ))... (ƒë√£ ch·ªù $(($ATTEMPTS * $SLEEP_INTERVAL)) gi√¢y)"
#     fi
# done

# if ${PROXY_RUNNING}; then
#     log_and_echo "‚úÖ TH√ÄNH C√îNG: Proxy MTProto d∆∞·ªùng nh∆∞ ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y v√† ƒëang l·∫Øng nghe tr√™n port ${RANDOM_PORT}."
# else
#     log_and_echo "‚ö†Ô∏è C·∫¢NH B√ÅO: Script kh√¥ng th·ªÉ t·ª± ƒë·ªông x√°c nh·∫≠n proxy ƒëang ch·∫°y tr√™n port ${RANDOM_PORT}."
#     log_and_echo "Tuy nhi√™n, proxy C√ì TH·ªÇ V·∫™N ƒêANG HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG N·∫æU KH√îNG C√ì L·ªñI NGHI√äM TR·ªåNG TRONG LOG."
#     log_and_echo "H√ÉY TH·ª¨ K·∫æT N·ªêI B·∫∞NG LINK TELEGRAM ƒê∆Ø·ª¢C CUNG C·∫§P (s·∫Ω hi·ªÉn th·ªã ·ªü cu·ªëi)."
#     log_and_echo "KI·ªÇM TRA K·ª∏ file log ƒë·ªÉ bi·∫øt chi ti·∫øt:"
#     log_and_echo "   cat ${LOG_PROXY_OUTPUT_FILE}"
# fi

# echo ""
# log_and_echo "=================================================="
# log_and_echo "Script ƒë√£ ho√†n t·∫•t: $(date)"
# log_and_echo "=================================================="
# log_and_echo "üîó LINK K·∫æT N·ªêI TELEGRAM"
# log_and_echo "${TG_LINK}"
# log_and_echo "=================================================="
# echo ""
# log_and_echo "---------------------------------------------------------------------"
# log_and_echo "TH√îNG TIN H·ªñ TR·ª¢ & LI√äN H·ªÜ:"
# log_and_echo "Telegram: @thevv"
# log_and_echo "Email: vuvanthe64@gmail.com"
# echo ""

# exit 0


#!/bin/bash

# Script t·ª± ƒë·ªông c√†i ƒë·∫∑t, c·∫•u h√¨nh v√† qu·∫£n l√Ω NHI·ªÄU INSTANCE MTProxy b·∫±ng systemd
# M·ªói l·∫ßn ch·∫°y s·∫Ω c·ªë g·∫Øng t·∫°o m·ªôt instance proxy m·ªõi tr√™n m·ªôt port ng·∫´u nhi√™n.
# Repository: GetPageSpeed/MTProxy

# --- Bi·∫øn to√†n c·ª•c ---
REPO_DIR="/opt/MTProxy_GetPageSpeed"
WORKING_DIR_BASE="${REPO_DIR}/objs/bin" # Th∆∞ m·ª•c ch·ª©a file th·ª±c thi v√† config chung
CONFIG_FILES_DIR="${REPO_DIR}/configs" # Th∆∞ m·ª•c l∆∞u file th√¥ng tin c·ªßa t·ª´ng instance
LOG_FILES_DIR="${REPO_DIR}/logs"     # Th∆∞ m·ª•c l∆∞u log (n·∫øu kh√¥ng d√πng journald ho√†n to√†n)

# --- H√†m ti·ªán √≠ch ---
log_and_echo() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# --- B·∫Øt ƒë·∫ßu Script ---
clear
log_and_echo "=================================================="
log_and_echo "B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o INSTANCE MTProxy M·ªöI (GetPageSpeed fork) v·ªõi systemd..."
log_and_echo "=================================================="
echo ""

# T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt n·∫øu ch∆∞a c√≥
mkdir -p "${CONFIG_FILES_DIR}"
mkdir -p "${LOG_FILES_DIR}"
# WORKING_DIR_BASE s·∫Ω ƒë∆∞·ª£c t·∫°o b·ªüi git clone

# --- B∆∞·ªõc 1: C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt (ch·ªâ ch·∫°y n·∫øu c·∫ßn) ---
PACKAGES_INSTALLED_MARKER="${REPO_DIR}/.packages_installed"
if [ ! -f "${PACKAGES_INSTALLED_MARKER}" ]; then
    log_and_echo "[1/9] ƒêang c·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i ph·ª• thu·ªôc..."
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -yqq > /dev/null 2>&1 || { log_and_echo "L·ªñI: apt-get update th·∫•t b·∫°i."; exit 1; }
    apt-get install -y -qq git curl build-essential libssl-dev zlib1g-dev make ufw > /dev/null 2>&1 || { log_and_echo "L·ªñI: apt-get install th·∫•t b·∫°i."; exit 1; }
    log_and_echo "C√†i ƒë·∫∑t g√≥i ph·ª• thu·ªôc th√†nh c√¥ng."
    touch "${PACKAGES_INSTALLED_MARKER}" # ƒê√°nh d·∫•u ƒë√£ c√†i ƒë·∫∑t
    echo ""
else
    log_and_echo "[1/9] C√°c g√≥i ph·ª• thu·ªôc c·∫ßn thi·∫øt d∆∞·ªùng nh∆∞ ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t tr∆∞·ªõc ƒë√≥. B·ªè qua b∆∞·ªõc n√†y."
    echo ""
fi

# --- B∆∞·ªõc 2: T·∫£i m√£ ngu·ªìn MTProxy (ch·ªâ ch·∫°y n·∫øu c·∫ßn) ---
PROXY_EXEC_PATH="${WORKING_DIR_BASE}/mtproto-proxy"
if [ ! -f "${PROXY_EXEC_PATH}" ]; then
    log_and_echo "[2/9] M√£ ngu·ªìn MTProxy ch∆∞a ƒë∆∞·ª£c t·∫£i/bi√™n d·ªãch. Ti·∫øn h√†nh..."
    if [ -d "$REPO_DIR" ]; then # X√≥a th∆∞ m·ª•c repo c≈© n·∫øu c√≥ ƒë·ªÉ ƒë·∫£m b·∫£o s·∫°ch
      log_and_echo "T√¨m th·∫•y th∆∞ m·ª•c $REPO_DIR c≈©. ƒêang x√≥a ƒë·ªÉ t·∫£i l·∫°i..."
      rm -rf "$REPO_DIR"
    fi
    mkdir -p "$REPO_DIR"
    log_and_echo "ƒêang t·∫£i m√£ ngu·ªìn MTProxy (GetPageSpeed fork)..."
    git clone "https://github.com/GetPageSpeed/MTProxy" "$REPO_DIR" > /dev/null 2>&1 || { log_and_echo "L·ªñI: git clone th·∫•t b·∫°i."; exit 1; }
    log_and_echo "T·∫£i m√£ ngu·ªìn th√†nh c√¥ng v√†o $REPO_DIR."
    echo ""

    # --- B∆∞·ªõc 3: Bi√™n d·ªãch MTProxy ---
    log_and_echo "[3/9] ƒêang bi√™n d·ªãch MTProxy..."
    cd "$REPO_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $REPO_DIR"; exit 1; }
    make > /dev/null 2>&1 || { log_and_echo "L·ªñI: make th·∫•t b·∫°i."; exit 1; }
    if [ ! -f "$PROXY_EXEC_PATH" ]; then
        log_and_echo "L·ªñI: Bi√™n d·ªãch MTProxy th·∫•t b·∫°i, kh√¥ng t√¨m th·∫•y file th·ª±c thi."
        exit 1
    fi
    log_and_echo "Bi√™n d·ªãch th√†nh c√¥ng."
    echo ""
else
    log_and_echo "[2/9] & [3/9] M√£ ngu·ªìn MTProxy ƒë√£ ƒë∆∞·ª£c t·∫£i v√† bi√™n d·ªãch tr∆∞·ªõc ƒë√≥. B·ªè qua."
    echo ""
fi

# --- B∆∞·ªõc 4: Chu·∫©n b·ªã th∆∞ m·ª•c l√†m vi·ªác cho c√°c file config chung ---
log_and_echo "[4/9] ƒêang chu·∫©n b·ªã trong th∆∞ m·ª•c l√†m vi·ªác chung: $WORKING_DIR_BASE"
cd "$WORKING_DIR_BASE" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $WORKING_DIR_BASE"; exit 1; }
# T·∫£i official proxy secret/config n·∫øu ch∆∞a c√≥ ho·∫∑c file r·ªóng
if [ ! -s "official-proxy-secret" ]; then
    log_and_echo "T·∫£i official-proxy-secret (cho upstream connection)..."
    curl -sS --fail https://core.telegram.org/getProxySecret -o official-proxy-secret || log_and_echo "C·∫¢NH B√ÅO: Kh√¥ng t·∫£i ƒë∆∞·ª£c official-proxy-secret."
fi
if [ ! -s "proxy-multi.conf" ]; then
    log_and_echo "T·∫£i proxy-multi.conf..."
    curl -sS --fail https://core.telegram.org/getProxyConfig -o proxy-multi.conf || { log_and_echo "L·ªñI QUAN TR·ªåNG: Kh√¥ng t·∫£i ƒë∆∞·ª£c proxy-multi.conf. Kh√¥ng th·ªÉ ti·∫øp t·ª•c."; exit 1; }
fi
echo ""

# --- B∆∞·ªõc 5: T·∫°o client secret m·ªõi ---
log_and_echo "[5/9] ƒêang t·∫°o client secret m·ªõi..."
NEW_CLIENT_SECRET=$(head -c 16 /dev/urandom | xxd -p -c 16)
log_and_echo "Client Secret m·ªõi (s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng): $NEW_CLIENT_SECRET"
echo ""

# --- B∆∞·ªõc 6: T·∫°o port ng·∫´u nhi√™n v√† ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng ---
log_and_echo "[6/9] ƒêang t√¨m port ng·∫´u nhi√™n kh·∫£ d·ª•ng..."
MAX_PORT_ATTEMPTS=10
CURRENT_ATTEMPT=0
RANDOM_PORT=""
SERVICE_NAME_INSTANCE=""

while [ $CURRENT_ATTEMPT -lt $MAX_PORT_ATTEMPTS ]; do
    RANDOM_PORT=$(shuf -i 10000-65535 -n 1)
    SERVICE_NAME_INSTANCE="mtproxy-${RANDOM_PORT}.service"
    log_and_echo "Th·ª≠ nghi·ªám port: $RANDOM_PORT (Service: ${SERVICE_NAME_INSTANCE})"

    PORT_IN_USE=$(ss -tlpn | grep -q ":${RANDOM_PORT}" && echo "true" || echo "false")
    SERVICE_FILE_EXISTS=$(test -f "/etc/systemd/system/${SERVICE_NAME_INSTANCE}" && echo "true" || echo "false")

    if [ "$PORT_IN_USE" = "false" ] && [ "$SERVICE_FILE_EXISTS" = "false" ]; then
        log_and_echo "Port $RANDOM_PORT kh·∫£ d·ª•ng v√† ch∆∞a c√≥ service t∆∞∆°ng ·ª©ng."
        break
    else
        if [ "$PORT_IN_USE" = "true" ]; then
            log_and_echo "Port $RANDOM_PORT ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng."
        fi
        if [ "$SERVICE_FILE_EXISTS" = "true" ]; then
            log_and_echo "Service ${SERVICE_NAME_INSTANCE} ƒë√£ t·ªìn t·∫°i."
        fi
        RANDOM_PORT="" # Reset ƒë·ªÉ v√≤ng l·∫∑p ti·∫øp t·ª•c
    fi
    CURRENT_ATTEMPT=$((CURRENT_ATTEMPT + 1))
    sleep 1
done

if [ -z "$RANDOM_PORT" ]; then
    log_and_echo "L·ªñI: Kh√¥ng th·ªÉ t√¨m th·∫•y port ng·∫´u nhi√™n kh·∫£ d·ª•ng sau $MAX_PORT_ATTEMPTS l·∫ßn th·ª≠."
    exit 1
fi
log_and_echo "Port ng·∫´u nhi√™n ƒë∆∞·ª£c ch·ªçn: $RANDOM_PORT"
echo ""

# --- B∆∞·ªõc 7: M·ªü port tr√™n Firewall (UFW) ---
log_and_echo "[7/9] ƒêang m·ªü port $RANDOM_PORT tr√™n Firewall (UFW)..."
if ! command -v ufw > /dev/null; then
    log_and_echo "C·∫£nh b√°o: ufw ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
else
    if ! ufw status | grep -qw active; then
        log_and_echo "UFW ch∆∞a active. ƒêang k√≠ch ho·∫°t v√† cho ph√©p SSH..."
        ufw allow ssh > /dev/null 2>&1
        ufw --force enable > /dev/null 2>&1
    fi
    ufw allow ${RANDOM_PORT}/tcp > /dev/null 2>&1
    ufw reload > /dev/null 2>&1
    log_and_echo "ƒê√£ th√™m rule cho port $RANDOM_PORT/tcp v√† reload UFW."
fi
echo ""

# --- B∆∞·ªõc 8: L·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß ---
log_and_echo "[8/9] ƒêang l·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß..."
SERVER_IP=$(curl -s --max-time 10 ifconfig.me/ip || curl -s --max-time 10 api.ipify.org || hostname -I | awk '{print $1}')
if [ -z "$SERVER_IP" ]; then
    log_and_echo "C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y ƒë·ªãa ch·ªâ IP. Link s·∫Ω c·∫ßn IP ƒë√∫ng."
    SERVER_IP="YOUR_SERVER_IP"
fi
log_and_echo "ƒê·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß: $SERVER_IP"
echo ""

# --- B∆∞·ªõc 9: T·∫°o v√† k√≠ch ho·∫°t d·ªãch v·ª• systemd cho instance m·ªõi ---
log_and_echo "[9/9] ƒêang t·∫°o v√† k√≠ch ho·∫°t d·ªãch v·ª• systemd (${SERVICE_NAME_INSTANCE})..."
STATS_PORT_INSTANCE=$((RANDOM_PORT + 1)) # T·∫°o port th·ªëng k√™ kh√°c ƒëi m·ªôt ch√∫t
if [ $STATS_PORT_INSTANCE -gt 65535 ]; then STATS_PORT_INSTANCE=$((RANDOM_PORT - 1)); fi
if [ $STATS_PORT_INSTANCE -lt 1024 ]; then STATS_PORT_INSTANCE=8889; fi # ƒê·∫£m b·∫£o kh√¥ng ph·∫£i port < 1024

PROXY_SYSTEMD_COMMAND="${PROXY_EXEC_PATH} -u nobody -p ${STATS_PORT_INSTANCE} -H ${RANDOM_PORT} -S ${NEW_CLIENT_SECRET} --aes-pwd ${WORKING_DIR_BASE}/official-proxy-secret ${WORKING_DIR_BASE}/proxy-multi.conf -M 1"

SERVICE_FILE_CONTENT="[Unit]
Description=MTProxy (GetPageSpeed fork) instance on port ${RANDOM_PORT}
After=network.target

[Service]
Type=simple
User=nobody
Group=nogroup
WorkingDirectory=${WORKING_DIR_BASE}
ExecStart=${PROXY_SYSTEMD_COMMAND}
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target"

echo "${SERVICE_FILE_CONTENT}" | sudo tee /etc/systemd/system/${SERVICE_NAME_INSTANCE} > /dev/null
if [ $? -ne 0 ]; then log_and_echo "L·ªñI: Kh√¥ng th·ªÉ t·∫°o file d·ªãch v·ª• systemd cho ${SERVICE_NAME_INSTANCE}."; exit 1; fi

sudo systemctl daemon-reload
sudo systemctl enable "${SERVICE_NAME_INSTANCE}"
sudo systemctl start "${SERVICE_NAME_INSTANCE}"

log_and_echo "D·ªãch v·ª• ${SERVICE_NAME_INSTANCE} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† kh·ªüi ƒë·ªông."
echo ""

# --- L∆∞u th√¥ng tin c·∫•u h√¨nh cho instance n√†y ---
CONFIG_INFO_FILE_INSTANCE="${CONFIG_FILES_DIR}/mtproxy-${RANDOM_PORT}.info"
TG_LINK="tg://proxy?server=${SERVER_IP}&port=${RANDOM_PORT}&secret=${NEW_CLIENT_SECRET}"
log_and_echo "ƒêang l∆∞u th√¥ng tin c·∫•u h√¨nh v√†o ${CONFIG_INFO_FILE_INSTANCE}..."
{
    echo "SERVICE_NAME=${SERVICE_NAME_INSTANCE}"
    echo "SERVER_IP=${SERVER_IP}"
    echo "PORT=${RANDOM_PORT}"
    echo "SECRET=${NEW_CLIENT_SECRET}"
    echo "TG_LINK=${TG_LINK}"
    echo "STATS_PORT=${STATS_PORT_INSTANCE}"
} > "${CONFIG_INFO_FILE_INSTANCE}"
log_and_echo "Th√¥ng tin c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u."
echo ""


# --- B∆∞·ªõc 10 (Cu·ªëi): Ki·ªÉm tra tr·∫°ng th√°i v√† hi·ªÉn th·ªã th√¥ng tin ---
log_and_echo "[10/10] Ki·ªÉm tra tr·∫°ng th√°i cu·ªëi c√πng v√† hi·ªÉn th·ªã th√¥ng tin cho instance m·ªõi..."

if systemctl is-active --quiet "${SERVICE_NAME_INSTANCE}"; then
    log_and_echo "‚úÖ TH√ÄNH C√îNG: D·ªãch v·ª• MTProxy (${SERVICE_NAME_INSTANCE}) ƒëang ho·∫°t ƒë·ªông."
    log_and_echo "L·∫Øng nghe tr√™n port ${RANDOM_PORT}."
else
    log_and_echo "‚ö†Ô∏è C·∫¢NH B√ÅO: D·ªãch v·ª• MTProxy (${SERVICE_NAME_INSTANCE}) KH√îNG ho·∫°t ƒë·ªông sau khi c·ªë g·∫Øng kh·ªüi ƒë·ªông."
    log_and_echo "Vui l√≤ng ki·ªÉm tra log b·∫±ng l·ªánh: sudo journalctl -u ${SERVICE_NAME_INSTANCE} -e"
fi

echo ""
log_and_echo "=================================================="
log_and_echo "Script ƒë√£ ho√†n t·∫•t vi·ªác t·∫°o instance m·ªõi: $(date)"
log_and_echo "=================================================="
# Ph·∫ßn hi·ªÉn th·ªã link v√† th√¥ng tin li√™n h·ªá ƒë∆∞·ª£c di chuy·ªÉn xu·ªëng d∆∞·ªõi
echo ""
log_and_echo "---------------------------------------------------------------------"
log_and_echo "Qu·∫£n l√Ω d·ªãch v·ª• V·ª™A T·∫†O (${SERVICE_NAME_INSTANCE}):"
log_and_echo "  - Ki·ªÉm tra tr·∫°ng th√°i: sudo systemctl status ${SERVICE_NAME_INSTANCE}"
log_and_echo "  - D·ª´ng d·ªãch v·ª•:       sudo systemctl stop ${SERVICE_NAME_INSTANCE}"
log_and_echo "  - Kh·ªüi ƒë·ªông d·ªãch v·ª•:  sudo systemctl start ${SERVICE_NAME_INSTANCE}"
log_and_echo "  - Xem log tr·ª±c ti·∫øp:   sudo journalctl -u ${SERVICE_NAME_INSTANCE} -f -n 100"
log_and_echo "---------------------------------------------------------------------"
log_and_echo "Th√¥ng tin c·∫•u h√¨nh chi ti·∫øt c·ªßa instance n√†y ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: ${CONFIG_INFO_FILE_INSTANCE}"
log_and_echo "ƒê·ªÉ xem danh s√°ch c√°c file c·∫•u h√¨nh ƒë√£ t·∫°o: ls -l ${CONFIG_FILES_DIR}"
log_and_echo "ƒê·ªÉ xem danh s√°ch c√°c service mtproxy ƒëang ch·∫°y: systemctl list-units 'mtproxy-*.service' --state=active"
log_and_echo "---------------------------------------------------------------------"
echo "" # Th√™m d√≤ng tr·ªëng tr∆∞·ªõc link
log_and_echo "üîó LINK K·∫æT N·ªêI TELEGRAM CHO PROXY M·ªöI"
log_and_echo "${TG_LINK}"
log_and_echo "=================================================="
echo ""
log_and_echo "TH√îNG TIN H·ªñ TR·ª¢ & LI√äN H·ªÜ:"
log_and_echo "Telegram: @thevv"
log_and_echo "Email: vuvanthe64@gmail.com"
log_and_echo "---------------------------------------------------------------------"
echo ""

exit 0
