# #!/bin/bash

# # H√†m ghi log v√† hi·ªÉn th·ªã ra m√†n h√¨nh
# log_and_echo() {
#     echo "$1"
# }

# log_and_echo "=================================================="
# log_and_echo "B·∫Øt ƒë·∫ßu qu√° tr√¨nh c√†i ƒë·∫∑t MTProxy (GetPageSpeed fork)..."
# log_and_echo "Th·ªùi gian b·∫Øt ƒë·∫ßu: $(date)"
# log_and_echo "=================================================="
# echo ""

# # --- B∆∞·ªõc 1: C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt ---
# log_and_echo "[1/8] ƒêang c·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i ph·ª• thu·ªôc..."
# export DEBIAN_FRONTEND=noninteractive
# apt-get update -yqq > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     log_and_echo "L·ªñI: apt-get update th·∫•t b·∫°i."
#     exit 1
# fi
# apt-get install -y -qq git curl build-essential libssl-dev zlib1g-dev make ufw > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     log_and_echo "L·ªñI: apt-get install th·∫•t b·∫°i."
#     exit 1
# fi
# log_and_echo "C√†i ƒë·∫∑t g√≥i ph·ª• thu·ªôc th√†nh c√¥ng."
# echo ""

# # --- B∆∞·ªõc 2: T·∫£i m√£ ngu·ªìn MTProxy (GetPageSpeed fork) ---
# log_and_echo "[2/8] ƒêang t·∫£i m√£ ngu·ªìn MTProxy (GetPageSpeed fork)..."
# REPO_URL="https://github.com/GetPageSpeed/MTProxy"
# REPO_DIR="/opt/MTProxy_GetPageSpeed"
# if [ -d "$REPO_DIR" ]; then
#   rm -rf "$REPO_DIR"
# fi
# git clone "$REPO_URL" "$REPO_DIR" > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     log_and_echo "L·ªñI: git clone th·∫•t b·∫°i. Ki·ªÉm tra URL repo ho·∫∑c k·∫øt n·ªëi m·∫°ng."
#     exit 1
# fi
# log_and_echo "T·∫£i m√£ ngu·ªìn th√†nh c√¥ng v√†o $REPO_DIR."
# echo ""

# # --- B∆∞·ªõc 3: Bi√™n d·ªãch MTProxy ---
# log_and_echo "[3/8] ƒêang bi√™n d·ªãch MTProxy..."
# cd "$REPO_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $REPO_DIR"; exit 1; }
# make > /dev/null 2>&1
# if [ ! -f "objs/bin/mtproto-proxy" ]; then
#     log_and_echo "L·ªñI: Bi√™n d·ªãch MTProxy th·∫•t b·∫°i."
#     cd /
#     exit 1
# fi
# log_and_echo "Bi√™n d·ªãch th√†nh c√¥ng."
# echo ""

# # --- B∆∞·ªõc 4: Chu·∫©n b·ªã file v√† th∆∞ m·ª•c th·ª±c thi ---
# PROXY_EXEC_PATH="${REPO_DIR}/objs/bin/mtproto-proxy"
# WORKING_DIR="${REPO_DIR}/objs/bin"
# cd "$WORKING_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $WORKING_DIR"; exit 1; }
# log_and_echo "[4/8] ƒêang chu·∫©n b·ªã trong th∆∞ m·ª•c: $(pwd)"
# echo ""

# # --- B∆∞·ªõc 5: T·∫°o client secret v√† t·∫£i official proxy secret/config ---
# log_and_echo "[5/8] ƒêang t·∫°o client secret v√† t·∫£i official proxy secret/config..."
# NEW_CLIENT_SECRET=$(head -c 16 /dev/urandom | xxd -p -c 16)

# log_and_echo "T·∫£i official-proxy-secret t·ª´ core.telegram.org..."
# curl -sS --fail https://core.telegram.org/getProxySecret -o official-proxy-secret
# if [ $? -ne 0 ] || [ ! -s official-proxy-secret ]; then
#     log_and_echo "C·∫¢NH B√ÅO QUAN TR·ªåNG: Kh√¥ng t·∫£i ƒë∆∞·ª£c official-proxy-secret."
#     log_and_echo "Proxy c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng n·∫øu kh√¥ng c√≥ file n√†y."
#     # Kh√¥ng exit, nh∆∞ng c·∫£nh b√°o r√µ
# fi

# log_and_echo "T·∫£i proxy-multi.conf t·ª´ core.telegram.org..."
# curl -sS --fail https://core.telegram.org/getProxyConfig -o proxy-multi.conf
# if [ $? -ne 0 ] || [ ! -s proxy-multi.conf ]; then # Check curl exit status AND if file is not empty
#     log_and_echo "L·ªñI QUAN TR·ªåNG: Kh√¥ng t·∫£i ƒë∆∞·ª£c proxy-multi.conf t·ª´ Telegram."
#     log_and_echo "Proxy s·∫Ω kh√¥ng th·ªÉ ho·∫°t ƒë·ªông n·∫øu kh√¥ng c√≥ file n√†y ho·∫∑c file n√†y kh√¥ng ƒë√∫ng."
#     log_and_echo "Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa VPS v√† th·ª≠ ch·∫°y l·∫°i script."
#     log_and_echo "B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ t·∫£i th·ªß c√¥ng: curl -o ${WORKING_DIR}/proxy-multi.conf https://core.telegram.org/getProxyConfig"
#     exit 1 # Tho√°t script v√¨ ƒë√¢y l√† l·ªói nghi√™m tr·ªçng
# fi
# log_and_echo "T·∫°o client secret v√† t·∫£i file c·∫•u h√¨nh th√†nh c√¥ng."
# log_and_echo "Client Secret m·ªõi: $NEW_CLIENT_SECRET"
# echo ""

# # --- B∆∞·ªõc 6: T·∫°o port ng·∫´u nhi√™n ---
# log_and_echo "[6/8] ƒêang t·∫°o port ng·∫´u nhi√™n..."
# RANDOM_PORT=$(shuf -i 10000-65535 -n 1)
# log_and_echo "Port ng·∫´u nhi√™n m·ªõi: $RANDOM_PORT"
# echo ""

# # --- B∆∞·ªõc 7: M·ªü port tr√™n Firewall (UFW) ---
# log_and_echo "[7/8] ƒêang m·ªü port $RANDOM_PORT tr√™n Firewall (UFW)..."
# if ! command -v ufw > /dev/null; then
#     log_and_echo "C·∫£nh b√°o: ufw ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
# else
#     if ! ufw status | grep -qw active; then
#         log_and_echo "UFW ch∆∞a active. ƒêang k√≠ch ho·∫°t v√† cho ph√©p SSH..."
#         ufw allow ssh > /dev/null 2>&1
#         ufw --force enable > /dev/null 2>&1
#     fi
#     ufw allow ${RANDOM_PORT}/tcp > /dev/null 2>&1
#     ufw reload > /dev/null 2>&1
#     log_and_echo "ƒê√£ th√™m rule cho port $RANDOM_PORT/tcp v√† reload UFW."
# fi
# echo ""

# # --- B∆∞·ªõc 8: L·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß ---
# log_and_echo "[8/8] ƒêang l·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß..."
# SERVER_IP=$(curl -s --max-time 10 ifconfig.me/ip || curl -s --max-time 10 api.ipify.org || hostname -I | awk '{print $1}')
# if [ -z "$SERVER_IP" ]; then
#     log_and_echo "C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y ƒë·ªãa ch·ªâ IP. Link c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c."
#     SERVER_IP="YOUR_SERVER_IP"
# fi
# log_and_echo "ƒê·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß: $SERVER_IP"
# echo ""

# # --- Chu·∫©n b·ªã th√¥ng tin ch·∫°y v√† link ---
# PROXY_RUN_COMMAND="${PROXY_EXEC_PATH} -u nobody -p 8888 -H ${RANDOM_PORT} -S ${NEW_CLIENT_SECRET} --aes-pwd official-proxy-secret proxy-multi.conf -M 1"
# TG_LINK="tg://proxy?server=${SERVER_IP}&port=${RANDOM_PORT}&secret=${NEW_CLIENT_SECRET}"
# LOG_PROXY_OUTPUT_FILE="${WORKING_DIR}/mtproxy_runtime.log"

# log_and_echo "===================================================================="
# log_and_echo "C√ÄI ƒê·∫∂T HO√ÄN T·∫§T! ƒêANG CHU·∫®N B·ªä KH·ªûI CH·∫†Y..."
# log_and_echo "===================================================================="
# log_and_echo "--------------------------------------------------------------------"
# log_and_echo "L·ªánh ch·∫°y proxy (s·∫Ω t·ª± ƒë·ªông ch·∫°y ·ªü n·ªÅn):"
# log_and_echo "   nohup ${PROXY_RUN_COMMAND} > ${LOG_PROXY_OUTPUT_FILE} 2>&1 &"
# log_and_echo "   (Log c·ªßa proxy s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: ${LOG_PROXY_OUTPUT_FILE})"
# log_and_echo "--------------------------------------------------------------------"
# echo ""

# # --- B∆Ø·ªöC CU·ªêI: T·ª∞ ƒê·ªòNG KH·ªûI CH·∫†Y PROXY ---
# log_and_echo "ƒêang kh·ªüi ch·∫°y proxy ·ªü ch·∫ø ƒë·ªô n·ªÅn..."
# cd "$WORKING_DIR" || exit
# # X√≥a log c≈© tr∆∞·ªõc khi ch·∫°y m·ªõi
# if [ -f "${LOG_PROXY_OUTPUT_FILE}" ]; then
#     rm -f "${LOG_PROXY_OUTPUT_FILE}"
# fi
# nohup ${PROXY_RUN_COMMAND} > ${LOG_PROXY_OUTPUT_FILE} 2>&1 &

# # Ch·ªù v√† ki·ªÉm tra nhi·ªÅu l·∫ßn
# PROXY_RUNNING=false
# ATTEMPTS=0
# MAX_ATTEMPTS=5
# SLEEP_INTERVAL=4

# log_and_echo "ƒêang ki·ªÉm tra tr·∫°ng th√°i proxy (trong v√≤ng $((MAX_ATTEMPTS * SLEEP_INTERVAL)) gi√¢y)..."
# while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
#     sleep $SLEEP_INTERVAL
#     if ss -tlpn | grep -q ":${RANDOM_PORT}"; then
#         PROXY_RUNNING=true
#         break
#     fi
#     ATTEMPTS=$((ATTEMPTS + 1))
#     if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
#       log_and_echo "Ki·ªÉm tra l·∫ßn $((ATTEMPTS +1 ))... (ƒë√£ ch·ªù $(($ATTEMPTS * $SLEEP_INTERVAL)) gi√¢y)"
#     fi
# done

# if ${PROXY_RUNNING}; then
#     log_and_echo "‚úÖ TH√ÄNH C√îNG: Proxy MTProto d∆∞·ªùng nh∆∞ ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y v√† ƒëang l·∫Øng nghe tr√™n port ${RANDOM_PORT}."
# else
#     log_and_echo "‚ö†Ô∏è C·∫¢NH B√ÅO: Script kh√¥ng th·ªÉ t·ª± ƒë·ªông x√°c nh·∫≠n proxy ƒëang ch·∫°y tr√™n port ${RANDOM_PORT}."
#     log_and_echo "Tuy nhi√™n, proxy C√ì TH·ªÇ V·∫™N ƒêANG HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG N·∫æU KH√îNG C√ì L·ªñI NGHI√äM TR·ªåNG TRONG LOG."
#     log_and_echo "H√ÉY TH·ª¨ K·∫æT N·ªêI B·∫∞NG LINK TELEGRAM ƒê∆Ø·ª¢C CUNG C·∫§P (s·∫Ω hi·ªÉn th·ªã ·ªü cu·ªëi)."
#     log_and_echo "KI·ªÇM TRA K·ª∏ file log ƒë·ªÉ bi·∫øt chi ti·∫øt:"
#     log_and_echo "   cat ${LOG_PROXY_OUTPUT_FILE}"
# fi

# echo ""
# log_and_echo "=================================================="
# log_and_echo "Script ƒë√£ ho√†n t·∫•t: $(date)"
# log_and_echo "=================================================="
# log_and_echo "üîó LINK K·∫æT N·ªêI TELEGRAM"
# log_and_echo "${TG_LINK}"
# log_and_echo "=================================================="
# echo ""
# log_and_echo "---------------------------------------------------------------------"
# log_and_echo "TH√îNG TIN H·ªñ TR·ª¢ & LI√äN H·ªÜ:"
# log_and_echo "Telegram: @thevv"
# log_and_echo "Email: vuvanthe64@gmail.com"
# echo ""

# exit 0



#!/bin/bash

# Script t·ª± ƒë·ªông c√†i ƒë·∫∑t, c·∫•u h√¨nh v√† qu·∫£n l√Ω MTProxy b·∫±ng systemd
# Repository: GetPageSpeed/MTProxy

# --- Bi·∫øn to√†n c·ª•c ---
SERVICE_NAME="mtproxy.service"
REPO_DIR="/opt/MTProxy_GetPageSpeed"
WORKING_DIR="${REPO_DIR}/objs/bin"
PROXY_EXEC_PATH="${WORKING_DIR}/mtproto-proxy"
CONFIG_INFO_FILE="${REPO_DIR}/mtproxy_config.info" # File l∆∞u th√¥ng tin c·∫•u h√¨nh

# --- H√†m ti·ªán √≠ch ---
log_and_echo() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# --- B·∫Øt ƒë·∫ßu Script ---
clear
log_and_echo "=================================================="
log_and_echo "B·∫Øt ƒë·∫ßu qu√° tr√¨nh c√†i ƒë·∫∑t MTProxy (GetPageSpeed fork) v·ªõi systemd..."
log_and_echo "=================================================="
echo ""

# --- B∆∞·ªõc 0: Ki·ªÉm tra d·ªãch v·ª• MTProxy hi·ªán c√≥ ---
log_and_echo "[0/10] Ki·ªÉm tra d·ªãch v·ª• MTProxy (${SERVICE_NAME})..."
REINSTALL_NEEDED=true
if systemctl is-active --quiet "${SERVICE_NAME}"; then
    log_and_echo "‚úÖ D·ªãch v·ª• MTProxy (${SERVICE_NAME}) ƒëang ho·∫°t ƒë·ªông."
    if [ -f "${CONFIG_INFO_FILE}" ]; then
        log_and_echo "--- Th√¥ng tin c·∫•u h√¨nh hi·ªán t·∫°i ---"
        cat "${CONFIG_INFO_FILE}"
        echo "-----------------------------------"
    else
        log_and_echo "Kh√¥ng t√¨m th·∫•y file th√¥ng tin c·∫•u h√¨nh (${CONFIG_INFO_FILE})."
        log_and_echo "Link k·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c cung c·∫•p khi d·ªãch v·ª• ƒë∆∞·ª£c c√†i ƒë·∫∑t l·∫ßn ƒë·∫ßu."
    fi
    log_and_echo "ƒê·ªÉ qu·∫£n l√Ω d·ªãch v·ª•, s·ª≠ d·ª•ng: sudo systemctl [status|stop|start|restart] ${SERVICE_NAME}"
    log_and_echo "ƒê·ªÉ xem log: sudo journalctl -u ${SERVICE_NAME} -f"
    REINSTALL_NEEDED=false
    read -p "D·ªãch v·ª• ƒë√£ ch·∫°y. B·∫°n c√≥ mu·ªën d·ª´ng v√† c√†i ƒë·∫∑t l·∫°i ho√†n to√†n kh√¥ng? (y/N): " confirm_overwrite
    if [[ "$confirm_overwrite" == "y" || "$confirm_overwrite" == "Y" ]]; then
        log_and_echo "ƒêang d·ª´ng v√† v√¥ hi·ªáu h√≥a d·ªãch v·ª• c≈©..."
        sudo systemctl stop "${SERVICE_NAME}" > /dev/null 2>&1
        sudo systemctl disable "${SERVICE_NAME}" > /dev/null 2>&1
        REINSTALL_NEEDED=true
    else
        exit 0
    fi
elif systemctl list-unit-files --all | grep -q "^${SERVICE_NAME}"; then # Ki·ªÉm tra c·∫£ service inactive
    log_and_echo "‚ö†Ô∏è D·ªãch v·ª• MTProxy (${SERVICE_NAME}) ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t nh∆∞ng KH√îNG ch·∫°y."
    read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c c√†i ƒë·∫∑t l·∫°i (s·∫Ω ghi ƒë√® d·ªãch v·ª• v√† c·∫•u h√¨nh c≈©)? (y/N): " confirm_reinstall
    if [[ "$confirm_reinstall" != "y" && "$confirm_reinstall" != "Y" ]]; then
        log_and_echo "ƒê√£ h·ªßy c√†i ƒë·∫∑t l·∫°i. B·∫°n c√≥ th·ªÉ th·ª≠: sudo systemctl start ${SERVICE_NAME}"
        exit 0
    fi
    log_and_echo "Ti·∫øn h√†nh c√†i ƒë·∫∑t l·∫°i..."
    REINSTALL_NEEDED=true
else
    log_and_echo "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• MTProxy (${SERVICE_NAME}). Ti·∫øp t·ª•c c√†i ƒë·∫∑t m·ªõi..."
    REINSTALL_NEEDED=true
fi
echo ""

# --- B∆∞·ªõc 1: C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt ---
if [ "$REINSTALL_NEEDED" = true ]; then
    log_and_echo "[1/10] ƒêang c·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i ph·ª• thu·ªôc..."
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -yqq > /dev/null 2>&1 || { log_and_echo "L·ªñI: apt-get update th·∫•t b·∫°i."; exit 1; }
    apt-get install -y -qq git curl build-essential libssl-dev zlib1g-dev make ufw > /dev/null 2>&1 || { log_and_echo "L·ªñI: apt-get install th·∫•t b·∫°i."; exit 1; }
    log_and_echo "C√†i ƒë·∫∑t g√≥i ph·ª• thu·ªôc th√†nh c√¥ng."
    echo ""

    # --- B∆∞·ªõc 2: T·∫£i m√£ ngu·ªìn MTProxy ---
    log_and_echo "[2/10] ƒêang t·∫£i m√£ ngu·ªìn MTProxy (GetPageSpeed fork)..."
    if [ -d "$REPO_DIR" ]; then
      log_and_echo "T√¨m th·∫•y th∆∞ m·ª•c c√†i ƒë·∫∑t c≈© $REPO_DIR. ƒêang x√≥a..."
      rm -rf "$REPO_DIR"
    fi
    mkdir -p "$REPO_DIR" # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    git clone "https://github.com/GetPageSpeed/MTProxy" "$REPO_DIR" > /dev/null 2>&1 || { log_and_echo "L·ªñI: git clone th·∫•t b·∫°i."; exit 1; }
    log_and_echo "T·∫£i m√£ ngu·ªìn th√†nh c√¥ng v√†o $REPO_DIR."
    echo ""

    # --- B∆∞·ªõc 3: Bi√™n d·ªãch MTProxy ---
    log_and_echo "[3/10] ƒêang bi√™n d·ªãch MTProxy..."
    cd "$REPO_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $REPO_DIR"; exit 1; }
    make > /dev/null 2>&1 || { log_and_echo "L·ªñI: make th·∫•t b·∫°i."; exit 1; }
    if [ ! -f "$PROXY_EXEC_PATH" ]; then
        log_and_echo "L·ªñI: Bi√™n d·ªãch MTProxy th·∫•t b·∫°i, kh√¥ng t√¨m th·∫•y file th·ª±c thi."
        exit 1
    fi
    log_and_echo "Bi√™n d·ªãch th√†nh c√¥ng."
    echo ""

    # --- B∆∞·ªõc 4: Chu·∫©n b·ªã th∆∞ m·ª•c l√†m vi·ªác ---
    log_and_echo "[4/10] ƒêang chu·∫©n b·ªã trong th∆∞ m·ª•c l√†m vi·ªác: $WORKING_DIR"
    cd "$WORKING_DIR" || { log_and_echo "L·ªñI: Kh√¥ng th·ªÉ cd v√†o $WORKING_DIR"; exit 1; }
    echo ""

    # --- B∆∞·ªõc 5: T·∫°o client secret v√† t·∫£i official proxy secret/config ---
    log_and_echo "[5/10] ƒêang t·∫°o client secret v√† t·∫£i official proxy secret/config..."
    NEW_CLIENT_SECRET=$(head -c 16 /dev/urandom | xxd -p -c 16)

    log_and_echo "T·∫£i official-proxy-secret (cho upstream connection)..."
    curl -sS --fail https://core.telegram.org/getProxySecret -o official-proxy-secret
    if [ $? -ne 0 ] || [ ! -s official-proxy-secret ]; then
        log_and_echo "C·∫¢NH B√ÅO: Kh√¥ng t·∫£i ƒë∆∞·ª£c official-proxy-secret. Proxy c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng."
    fi

    log_and_echo "T·∫£i proxy-multi.conf..."
    curl -sS --fail https://core.telegram.org/getProxyConfig -o proxy-multi.conf
    if [ $? -ne 0 ] || [ ! -s proxy-multi.conf ]; then
        log_and_echo "L·ªñI QUAN TR·ªåNG: Kh√¥ng t·∫£i ƒë∆∞·ª£c proxy-multi.conf t·ª´ Telegram. Proxy s·∫Ω kh√¥ng th·ªÉ ho·∫°t ƒë·ªông."
        exit 1
    fi
    log_and_echo "T·∫°o client secret v√† t·∫£i file c·∫•u h√¨nh th√†nh c√¥ng."
    log_and_echo "Client Secret m·ªõi (s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng): $NEW_CLIENT_SECRET"
    echo ""

    # --- B∆∞·ªõc 6: T·∫°o port ng·∫´u nhi√™n ---
    log_and_echo "[6/10] ƒêang t·∫°o port ng·∫´u nhi√™n..."
    RANDOM_PORT=$(shuf -i 10000-65535 -n 1)
    log_and_echo "Port ng·∫´u nhi√™n m·ªõi (s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng): $RANDOM_PORT"
    echo ""

    # --- B∆∞·ªõc 7: M·ªü port tr√™n Firewall (UFW) ---
    log_and_echo "[7/10] ƒêang m·ªü port $RANDOM_PORT tr√™n Firewall (UFW)..."
    if ! command -v ufw > /dev/null; then
        log_and_echo "C·∫£nh b√°o: ufw ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t (ƒë√£ c·ªë g·∫Øng c√†i ·ªü B∆∞·ªõc 1)."
    else
        if ! ufw status | grep -qw active; then
            log_and_echo "UFW ch∆∞a active. ƒêang k√≠ch ho·∫°t v√† cho ph√©p SSH..."
            ufw allow ssh > /dev/null 2>&1
            ufw --force enable > /dev/null 2>&1
        fi
        ufw allow ${RANDOM_PORT}/tcp > /dev/null 2>&1
        ufw reload > /dev/null 2>&1
        log_and_echo "ƒê√£ th√™m rule cho port $RANDOM_PORT/tcp v√† reload UFW."
    fi
    echo ""

    # --- B∆∞·ªõc 8: L·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß ---
    log_and_echo "[8/10] ƒêang l·∫•y ƒë·ªãa ch·ªâ IP public c·ªßa m√°y ch·ªß..."
    SERVER_IP=$(curl -s --max-time 10 ifconfig.me/ip || curl -s --max-time 10 api.ipify.org || hostname -I | awk '{print $1}')
    if [ -z "$SERVER_IP" ]; then
        log_and_echo "C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y ƒë·ªãa ch·ªâ IP. Link s·∫Ω c·∫ßn IP ƒë√∫ng."
        SERVER_IP="YOUR_SERVER_IP" # Placeholder
    fi
    log_and_echo "ƒê·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß: $SERVER_IP"
    echo ""

    # --- B∆∞·ªõc 9: T·∫°o v√† k√≠ch ho·∫°t d·ªãch v·ª• systemd ---
    log_and_echo "[9/10] ƒêang t·∫°o v√† k√≠ch ho·∫°t d·ªãch v·ª• systemd (${SERVICE_NAME})..."
    # C·∫•u h√¨nh port th·ªëng k√™, c√≥ th·ªÉ ƒë·ªÉ c·ªë ƒë·ªãnh ho·∫∑c ng·∫´u nhi√™n kh√°c
    STATS_PORT=8888
    if [ "$STATS_PORT" = "$RANDOM_PORT" ]; then
        STATS_PORT=$((RANDOM_PORT + 1)) # ƒê·∫£m b·∫£o kh√°c port public
        if [ $STATS_PORT -gt 65535 ]; then STATS_PORT=$((RANDOM_PORT -1)); fi # X·ª≠ l√Ω n·∫øu v∆∞·ª£t qu√°
    fi

    PROXY_SYSTEMD_COMMAND="${PROXY_EXEC_PATH} -u nobody -p ${STATS_PORT} -H ${RANDOM_PORT} -S ${NEW_CLIENT_SECRET} --aes-pwd ${WORKING_DIR}/official-proxy-secret ${WORKING_DIR}/proxy-multi.conf -M 1"

    # T·∫°o n·ªôi dung file service
    SERVICE_FILE_CONTENT="[Unit]
Description=MTProxy (GetPageSpeed fork)
After=network.target

[Service]
Type=simple
User=nobody
Group=nogroup
WorkingDirectory=${WORKING_DIR}
ExecStart=${PROXY_SYSTEMD_COMMAND}
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target"

    # Ghi file service
    echo "${SERVICE_FILE_CONTENT}" | sudo tee /etc/systemd/system/${SERVICE_NAME} > /dev/null
    if [ $? -ne 0 ]; then
        log_and_echo "L·ªñI: Kh√¥ng th·ªÉ t·∫°o file d·ªãch v·ª• systemd."
        exit 1
    fi

    sudo systemctl daemon-reload
    sudo systemctl enable "${SERVICE_NAME}"
    # D·ª´ng service c≈© n·∫øu c√≥ (tr∆∞·ªùng h·ª£p reinstall m√† service v·∫´n k·∫πt)
    sudo systemctl stop "${SERVICE_NAME}" > /dev/null 2>&1
    sudo systemctl start "${SERVICE_NAME}"

    log_and_echo "D·ªãch v·ª• ${SERVICE_NAME} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† kh·ªüi ƒë·ªông."
    echo ""

    # --- L∆∞u th√¥ng tin c·∫•u h√¨nh ---
    log_and_echo "ƒêang l∆∞u th√¥ng tin c·∫•u h√¨nh v√†o ${CONFIG_INFO_FILE}..."
    TG_LINK="tg://proxy?server=${SERVER_IP}&port=${RANDOM_PORT}&secret=${NEW_CLIENT_SECRET}"
    {
        echo "SERVICE_NAME=${SERVICE_NAME}"
        echo "SERVER_IP=${SERVER_IP}"
        echo "PORT=${RANDOM_PORT}"
        echo "SECRET=${NEW_CLIENT_SECRET}"
        echo "TG_LINK=${TG_LINK}"
        echo "STATS_PORT=${STATS_PORT}"
        echo "CONFIG_FILE_PATH=${WORKING_DIR}/proxy-multi.conf"
        echo "SECRET_FILE_PATH=${WORKING_DIR}/official-proxy-secret"
        echo "LOG_COMMAND=sudo journalctl -u ${SERVICE_NAME} -f -n 50"
        echo "STATUS_COMMAND=sudo systemctl status ${SERVICE_NAME}"
        echo "STOP_COMMAND=sudo systemctl stop ${SERVICE_NAME}"
        echo "START_COMMAND=sudo systemctl start ${SERVICE_NAME}"
    } > "${CONFIG_INFO_FILE}"
    log_and_echo "Th√¥ng tin c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u."
    echo ""

else
    log_and_echo "Kh√¥ng th·ª±c hi·ªán c√†i ƒë·∫∑t l·∫°i. D·ªãch v·ª• ƒë√£ t·ªìn t·∫°i."
fi # K·∫øt th√∫c kh·ªëi if [ "$REINSTALL_NEEDED" = true ];

# --- B∆∞·ªõc 10 (Cu·ªëi): Ki·ªÉm tra tr·∫°ng th√°i v√† hi·ªÉn th·ªã th√¥ng tin ---
log_and_echo "[10/10] Ki·ªÉm tra tr·∫°ng th√°i cu·ªëi c√πng v√† hi·ªÉn th·ªã th√¥ng tin..."

# L·∫•y l·∫°i th√¥ng tin t·ª´ file config n·∫øu kh√¥ng ph·∫£i l√† l·∫ßn c√†i ƒë·∫∑t m·ªõi
if [ "$REINSTALL_NEEDED" = false ] && [ -f "${CONFIG_INFO_FILE}" ]; then
    # Source the file to get variables
    . "${CONFIG_INFO_FILE}"
elif [ "$REINSTALL_NEEDED" = true ]; then
    # Variables SERVER_IP, RANDOM_PORT, NEW_CLIENT_SECRET, TG_LINK, SERVICE_NAME already set
    # TG_LINK ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l·∫°i ·ªü ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ c√≥ gi√° tr·ªã n·∫øu kh√¥ng qua b∆∞·ªõc c√†i ƒë·∫∑t m·ªõi
    # nh∆∞ng v·∫´n c·∫ßn th√¥ng tin t·ª´ c√°c bi·∫øn ƒë√£ t·∫°o.
    TG_LINK="tg://proxy?server=${SERVER_IP}&port=${RANDOM_PORT}&secret=${NEW_CLIENT_SECRET}"
else
    log_and_echo "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh c·∫•u h√¨nh proxy ƒë·ªÉ hi·ªÉn th·ªã link."
    # C·ªë g·∫Øng t·∫°o m·ªôt link r·ªóng ƒë·ªÉ tr√°nh l·ªói bi·∫øn kh√¥ng x√°c ƒë·ªãnh
    TG_LINK="tg://proxy?server=ERROR&port=0&secret=ERROR_CHECK_CONFIG_FILE"
fi


# Ki·ªÉm tra tr·∫°ng th√°i d·ªãch v·ª•
if systemctl is-active --quiet "${SERVICE_NAME}"; then
    log_and_echo "‚úÖ TH√ÄNH C√îNG: D·ªãch v·ª• MTProxy (${SERVICE_NAME}) ƒëang ho·∫°t ƒë·ªông."
    # L·∫•y port t·ª´ bi·∫øn RANDOM_PORT n·∫øu v·ª´a c√†i, ho·∫∑c t·ª´ file config n·∫øu kh√¥ng c√†i l·∫°i
    CURRENT_PORT=${RANDOM_PORT:-$(grep "^PORT=" "${CONFIG_INFO_FILE}" 2>/dev/null | cut -d= -f2)}
    log_and_echo "L·∫Øng nghe tr√™n port ${CURRENT_PORT:-Kh√¥ng x√°c ƒë·ªãnh}."
else
    log_and_echo "‚ö†Ô∏è C·∫¢NH B√ÅO: D·ªãch v·ª• MTProxy (${SERVICE_NAME}) KH√îNG ho·∫°t ƒë·ªông sau khi c·ªë g·∫Øng kh·ªüi ƒë·ªông."
    log_and_echo "Vui l√≤ng ki·ªÉm tra log b·∫±ng l·ªánh: sudo journalctl -u ${SERVICE_NAME} -e"
    log_and_echo "V√† ki·ªÉm tra l·∫°i file c·∫•u h√¨nh MTProxy t·∫°i ${WORKING_DIR}"
fi

echo ""
log_and_echo "=================================================="
log_and_echo "Script ƒë√£ ho√†n t·∫•t: $(date)"
log_and_echo "=================================================="
echo ""
log_and_echo "üîó LINK K·∫æT N·ªêI TELEGRAM"
log_and_echo "${TG_LINK:-Kh√¥ng th·ªÉ t·∫°o link, vui l√≤ng ki·ªÉm tra ${CONFIG_INFO_FILE}}"
log_and_echo "=================================================="
echo ""
log_and_echo "---------------------------------------------------------------------"
log_and_echo "Qu·∫£n l√Ω d·ªãch v·ª•:"
log_and_echo "  - Ki·ªÉm tra tr·∫°ng th√°i: sudo systemctl status ${SERVICE_NAME}"
log_and_echo "  - D·ª´ng d·ªãch v·ª•:       sudo systemctl stop ${SERVICE_NAME}"
log_and_echo "  - Kh·ªüi ƒë·ªông d·ªãch v·ª•:  sudo systemctl start ${SERVICE_NAME}"
log_and_echo "  - Xem log tr·ª±c ti·∫øp:   sudo journalctl -u ${SERVICE_NAME} -f -n 100"
log_and_echo "  - Xem t·∫•t c·∫£ log:      sudo journalctl -u ${SERVICE_NAME}"
log_and_echo "---------------------------------------------------------------------"
log_and_echo "Th√¥ng tin c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: ${CONFIG_INFO_FILE}"
log_and_echo "---------------------------------------------------------------------"
log_and_echo "TH√îNG TIN H·ªñ TR·ª¢ & LI√äN H·ªÜ:"
log_and_echo "Telegram: @thevv"
log_and_echo "Email: vuvanthe64@gmail.com"
log_and_echo "---------------------------------------------------------------------"
echo ""

exit 0

